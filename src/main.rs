mod data_structures;
mod helpers;
mod make_players;
mod make_teams;
mod weight_players;

use crate::data_structures::{Player, Team};
use std::error::Error;
extern crate reqwest;
extern crate tokio;
use clap::{App, Arg};

#[tokio::main]
async fn main() -> Result<(), Box<dyn Error>> {
    // TODO ALEX: abstract this out into a separate function
    let matches = App::new("bingo-teams")
        .version("0.1.0")
        .author("Alexander <alexander.wesley.campbell@gmail.com>")
        .about("Helps create fair bingo teams for OSRS using Temple OSRS API.")
        // ./target/release/bingo-teams make-players input/usernames_test.csv
        .subcommand(
            App::new("make-players")
                .about("Takes in a csv with just usernames, gathers relevant stats from 
                    Temple OSRS and prints them into another csv. Please make corrections here 
                    when Temple breaks. /(Normally due to name changes, recent sweating or new user/)")
                .arg(Arg::with_name("file")
                    .help("The input csv listing purely usernames")
                    .required(true))
        )
        // ./target/release/bingo-teams weight-players output/raw_players.csv
        .subcommand(
            App::new("weight-players")
                .about("Takes in a csv of users with stats, weights them according to 
                    `weight_players/weight_scores()` function. Spits out the same as the input file, 
                    but with a `final_score` column. Please check these weights!")
                .arg(Arg::with_name("file").
                    help("The input csv generated by 'make-players', after manually checking scores")
                    .required(true))
        )
        // ./target/release/bingo-teams make-teams output/weighted_players.csv
        .subcommand(
            App::new("make-teams")
                .about("Using the `final_score` for each player in the input csv, attempts to fairly 
                    spread out team members into the given amount of teams.")
                .arg(Arg::with_name("file")
                    .help("The input csv generated by 'weight-players', after manually checking weights")
                    .required(true))
                // .arg(Arg::with_name("team-count")
                //     .help("Indicates number of teams to place players in.")
                //     .required(true))
        )
        .get_matches();

    match matches.subcommand() {
        ("make-players", Some(sub_m)) => {
            let file_name = sub_m.value_of("file").unwrap();

            println!("Reading in player usernames from {}...", file_name);
            let player_names = helpers::read_usernames(&file_name)?;

            println!(
                "Calling Temple OSRS for {} usernames, may take a while...",
                player_names.len()
            );
            let players: Vec<Player> =
                make_players::create_players_with_temple(&player_names).await?;

            println!("Printing out csv, please make manual checks!");
            // TODO ALEX: put this in a constants file
            let path = "./output/raw_players.csv";
            helpers::write_csv_player(&players, &path)?;
            println!("Printed csv for players to {:?}", path);
        }
        ("weight-players", Some(sub_m)) => {
            let file_name = sub_m.value_of("file").unwrap();

            println!("Reading in players...");
            let mut players = helpers::read_csv_players(file_name)?;

            println!("Weighting players...");
            weight_players::weight_scores(&mut players);

            let path = "./output/weighted_players.csv";
            println!("Printing weighted player scores out to {:?}", path);
            helpers::write_csv_player(&players, path)?;
        }
        ("make-teams", Some(sub_m)) => {
            println!("sub_m for make-teams: {:?}", sub_m);
            let file_name = sub_m.value_of("file").unwrap();
            // let team_count = sub_m.value_of("team_count").unwrap();
            let team_count = 11;

            println!("Reading in players...");
            let mut players = helpers::read_csv_players(file_name)?;

            println!("Sorting players into teams...");
            let teams: Vec<Team> = make_teams::sort_player_teams(&mut players, team_count);

            let path = "./output/teams.txt";
            println!("Printing teams out to {:?}", path);
            helpers::write_csv_teams(&teams, path)?;
        }
        _ => unreachable!(),
    }

    Ok(())
}
